name: CI

on:
  pull_request:
  push:
    branches: ["main"]

jobs:
  owners-enforcer:
    name: Enforce Code Owner Reviews
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Detect changed paths
        id: changes
        uses: dorny/paths-filter@v3
        with:
          filters: |
            smp:
              - 'src/main/java/com/demoapp/smp/**'
            ccp:
              - 'src/main/java/com/demoapp/ccp/**'
            shared:
              - 'src/main/java/com/demoapp/shared/**'

      - name: Validate approvals by team
        uses: actions/github-script@v7
        env:
          SMP_OWNERS: "team-smp"
          CCP_OWNERS: "team-ccp"
          SHARED_OWNERS: "team-core,team-smp,team-ccp"
        with:
          script: |
            const pr = context.payload.pull_request;
            const {owner, repo} = context.repo;
            const reviews = await github.paginate(
              github.rest.pulls.listReviews,
              { owner, repo, pull_number: pr.number }
            );
            const approvers = new Set(
              reviews.filter(r => r.state === 'APPROVED').map(r => r.user.login.toLowerCase())
            );

            const getOwners = (envKey) =>
              process.env[envKey].split(',').map(o => o.trim().toLowerCase()).filter(Boolean);

            const missing = [];

            if ('${{ steps.changes.outputs.smp }}' === 'true') {
              const owners = getOwners('SMP_OWNERS');
              if (!owners.some(o => approvers.has(o))) missing.push('SMP');
            }

            if ('${{ steps.changes.outputs.ccp }}' === 'true') {
              const owners = getOwners('CCP_OWNERS');
              if (!owners.some(o => approvers.has(o))) missing.push('CCP');
            }

            if ('${{ steps.changes.outputs.shared }}' === 'true') {
              const owners = getOwners('SHARED_OWNERS');
              if (!owners.some(o => approvers.has(o))) missing.push('SHARED');
            }

            if (missing.length > 0) {
              core.setFailed(`❌ Missing required approvals for module(s): ${missing.join(', ')}`);
            } else {
              core.info("✅ All required approvals present");
            }

  build-test:
    runs-on: ubuntu-latest
    needs: [owners-enforcer] # <--- ajout important
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 24
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 24
          cache: gradle
      - name: Grant execute permission for Gradle
        run: chmod +x gradlew
      - name: Build & Test
        run: ./gradlew clean build --no-daemon

  docker-image:
    needs: build-test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build image
        run: |
          IMAGE=ghcr.io/${{ github.repository }}/app:sha-${{ github.sha }}
          docker build -t $IMAGE .
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV
      - name: Push image
        run: docker push $IMAGE

  compose-smoke:
    needs: docker-image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Create .env
        run: |
          echo DB_USER=demo >> .env
          echo DB_PASSWORD=demo >> .env
          echo DB_NAME=demoapp >> .env
      - name: Use pushed image with compose
        env:
          IMAGE: ghcr.io/${{ github.repository }}/app:sha-${{ github.sha }}
        run: |
          sed -i 's|build: .|image: '"$IMAGE"'|g' docker-compose.yml
          docker compose up -d
          echo "Waiting for app to start..." && sleep 20
          docker compose logs app
      - name: Health check
        run: |
          (curl -fsS http://localhost:8080/actuator/health || curl -fsS http://localhost:8080) || (docker compose logs app && exit 1)
